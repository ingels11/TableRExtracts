logical = dataMaid::defaultLogicalSummaries(),
Date = dataMaid::defaultDateSummaries()))
attr(college_grads$Total, "label", exact = TRUE)
is.null(attr(college_grads$Total, "label", exact = TRUE))
!is.null(attr(college_grads$Total, "label", exact = TRUE))
library(TableRExtracts)
dataMaid::makeDataReport(college_grads, mode = c("summarize", "visualize", "check"), replace = TRUE,
smartNum = TRUE,
summaries = dataMaid::setSummaries(character = dataMaid::defaultCharacterSummaries(),
factor = dataMaid::defaultFactorSummaries(),
labelled = dataMaid::defaultLabelledSummaries(),
numeric = dataMaid::defaultNumericSummaries(add = "meanSummary"),
integer = dataMaid::defaultIntegerSummaries(add = "meanSummary"),
logical = dataMaid::defaultLogicalSummaries(),
Date = dataMaid::defaultDateSummaries()))
AddDatLabel(college_grads) <- "College Graduate Earnings"
dataMaid::makeDataReport(college_grads, mode = c("summarize", "visualize", "check"), replace = TRUE,
smartNum = TRUE,
summaries = dataMaid::setSummaries(character = dataMaid::defaultCharacterSummaries(),
factor = dataMaid::defaultFactorSummaries(),
labelled = dataMaid::defaultLabelledSummaries(),
numeric = dataMaid::defaultNumericSummaries(add = "meanSummary"),
integer = dataMaid::defaultIntegerSummaries(add = "meanSummary"),
logical = dataMaid::defaultLogicalSummaries(),
Date = dataMaid::defaultDateSummaries()))
attr(college_grads, "label")
v <- data[["Total"]]
v <- college_grads[["Total"]]
attr(v, "label")
attr(v, "label", exact = TRUE)
devtools::document()
?dataMaid::makeDataReport
dataMaid::makeDataReport(college_grads,
mode = c("summarize", "visualize", "check"),
replace = TRUE,
summaries = dataMaid::setSummaries(character = dataMaid::defaultCharacterSummaries(),
factor = dataMaid::defaultFactorSummaries(),
labelled = dataMaid::defaultLabelledSummaries(),
numeric = dataMaid::defaultNumericSummaries(add = "meanSummary"),
integer = dataMaid::defaultIntegerSummaries(add = "meanSummary"),
logical = dataMaid::defaultLogicalSummaries(),
Date = dataMaid::defaultDateSummaries()))
library(TableRExtracts)
?`AddDatLabel<-`
AddVarLabels(college_grads) <- c("Total" = "Total number of people with major",
"Men" = "Male graduates",
"Women" = "Female graduates")
dataMaid::makeDataReport(college_grads,
mode = c("summarize", "visualize", "check"),
replace = TRUE,
summaries = dataMaid::setSummaries(character = dataMaid::defaultCharacterSummaries(),
factor = dataMaid::defaultFactorSummaries(),
labelled = dataMaid::defaultLabelledSummaries(),
numeric = dataMaid::defaultNumericSummaries(add = "meanSummary"),
integer = dataMaid::defaultIntegerSummaries(add = "meanSummary"),
logical = dataMaid::defaultLogicalSummaries(),
Date = dataMaid::defaultDateSummaries()))
devtools::document()
devtools::document()
library(TableRExtracts)
rm(list = ls())
flights <- nycflights13::flights
vars <- c("origin")
flights$time_of_day <- ifelse(flights$hour <= 12, "Morning",
ifelse(flights$hour <= 5, "Afternoon",
"Evening"))
flights <- AddVarLabels(flights, c("origin" = "Origin airport of flight",
"hour" = "Time of flight (hour part)",
"time_of_day" = "Time of day for flight"))
AddVarLabels(flights) <- c("origin" = "Origin airport of flight",
"hour" = "Time of flight (hour part)",
"time_of_day" = "Time of day for flight")
AddValLabels(flights) <- list("origin" = list(vals = c("EWR", "LGA", "JFK"),
labs = c("Newark, NJ",
"La Guardia, NY",
"JFK, NY")))
info <- c("FileName" = "TableRExtracts_test.R",
"DirName" = "TableRExtracts Work",
"Programmer" = "Ingels")
CreateExtractCat(flights, vars, "time_of_day", NA, "flights_extract", info)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
source('~/Library/Mobile Documents/com~apple~CloudDocs/TableRExtracts/R/create_extract.R')
rm(CreateExtractFreq, CreateExtractMean, CreateExtractPoints)
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
unique(flights$time_of_day)
unique(flights$hour)
rm(list = ls())
flights <- nycflights13::flights
vars <- c("origin")
flights$time_of_day <- ifelse(flights$hour <= 12, "Morning",
ifelse(flights$hour <= 17, "Afternoon",
"Evening"))
AddVarLabels(flights) <- c("origin" = "Origin airport of flight",
"hour" = "Time of flight (hour part)",
"time_of_day" = "Time of day for flight")
AddValLabels(flights) <- list("origin" = list(vals = c("EWR", "LGA", "JFK"),
labs = c("Newark, NJ",
"La Guardia, NY",
"JFK, NY")))
info <- c("FileName" = "TableRExtracts_test.R",
"DirName" = "TableRExtracts Work",
"Programmer" = "Ingels")
CreateExtractFreq(flights, vars, "time_of_day", NA, NA, info)
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, NA, info)
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, NA, info)
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
paste("Percent", seq.int(1, 3, 1), sep = "_")
tab_seq <- seq.int(1, 3, 1)
paste("Percent", tab_seq, sep = "_")
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
AddValLabels(flights) <-
list("origin" = list(vals = c("EWR", "LGA", "JFK"),
labs = c("Newark, NJ", "La Guardia, NY", "JFK, NY")),
"time_of_day", = list(vals = c("Morning", "Afternoon", "Evening"),
labs = c("Morning", "Afternoon", "Evening")))
AddValLabels(flights) <-
list("origin" = list(vals = c("EWR", "LGA", "JFK"),
labs = c("Newark, NJ", "La Guardia, NY", "JFK, NY")),
"time_of_day" = list(vals = c("Morning", "Afternoon", "Evening"),
labs = c("Morning", "Afternoon", "Evening")))
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
source('~/Documents/TableRExtracts Work/TableRExtracts_test.R')
source('~/Documents/TableRExtracts Work/TableRExtracts_test.R')
extract_lst$tab_labels
devtools::document()
library(TableRExtracts)
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
?nycflights13::flights
AddDatLabel(flights) <- "Flights data"
AddDatDescrip(flights) <-
"On-time data for all flights that departed NYC (i.e. JFK, LGA or EWR) in 2013."
deparse(flights)
bquote(flights)
as.character(bquote(flights))
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
substitute(x)
as.character(substitute(x))
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
c("time_of_flight")
length(c("time_of_flight"))
length(c("time_of_flight", "origin"))
is.character(c("time_of_flight", "origin"))
length(c())
flights[, c("time_of_flight", "origin")]
flights[, c("time_of_day", "origin")]
GetVarLabels(flights[, c("time_of_day", "origin")])
library(TableRExtracts)
GetValLabels(flights, "origin")
tmp <- GetValLabels(flights, "origin")
return_lst <- list()
library(TableRExtracts)
library(TableRExtracts)
tmp <- GetValLabels(flights, c("origin", "time_of_day"))
library(TableRExtracts)
tmp <- GetValLabels(flights, c("origin", "time_of_day"))
index
i
return_lst[["origin"]] <- attr(x[[index]], "vallabel")
return_lst["origin"] <- attr(x[[index]], "vallabel")
attr(x[[index]], "vallabel")
x[[index]]
return_lst[[i]] <- attr(x[[i]], "vallabel")
library(TableRExtracts)
tmp <- GetValLabels(flights, c("origin", "time_of_day"))
rm(tmp, return_lst)
flights$random_cat <- round(runif(nrow(flights), 0, 3))
rm(list = ls())
flights <- nycflights13::flights
flights$random_cat <- round(runif(nrow(flights), 0, 3))
vars <- c("origin")
tab_vars <- c()
vars <- c("origin")
tab_vars <- c("time_of_day", "random_cat")
flights$time_of_day <- ifelse(flights$hour <= 12, "Morning",
ifelse(flights$hour <= 17, "Afternoon",
"Evening"))
AddVarLabels(flights) <- c("origin" = "Origin airport of flight",
"hour" = "Time of flight (hour part)",
"time_of_day" = "Time of day for flight",
"random_cat" = "Random category, illustrative only")
AddValLabels(flights) <-
list("origin" = list(vals = c("EWR", "LGA", "JFK"),
labs = c("Newark, NJ", "La Guardia, NY", "JFK, NY")),
"time_of_day" = list(vals = c("Morning", "Afternoon", "Evening"),
labs = c("Morning", "Afternoon", "Evening")),
"random_cat" = list(vals = seq.int(0, 3, 1),
labs = c("Zero", "One", "Two", "Three")))
info <- c("FileName" = "TableRExtracts_test.R",
"DirName" = "TableRExtracts Work",
"Programmer" = "Ingels")
AddDatLabel(flights) <- "Flights data"
AddDatDescrip(flights) <-
"On-time data for all flights that departed NYC (i.e. JFK, LGA or EWR) in 2013."
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
purrr::is_empty(tab_vars)
is.na(tab_vars)
is.na(tab_vars)[1]
!is.na(tab_vars)[1]
sum(!is.na(tab_vars))
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
CreateExtractFreq <- function(x, vars, tab_vars, notes, outputfile, info,
test = NA, run_test = TRUE) {
# Setup extract --------------------------------------------------------------
# If an Extracts folder does not exist, create it
# fileConn is the connection to the CSV file for the extract
# If no output file is included, extract will be written to terminal
if (!is.na(outputfile)) {
check_extracts_dir()
fileConn <- file(paste("Extracts/", outputfile, ".csv", sep = ""),
open = "wt")
} else {
fileConn <- NA
}
# Check the text provided in info, replace commas with semicolons
if (!purrr::is_empty(info)) {
names_info <- stringr::str_replace_all(names(info), ",", ";")
info <- stringr::str_replace_all(info, ",", ";")
names(info) <- names_info
}
# Create a list with information used when writing extract lines
extract_lst <- list(type = "frequency",
tab_vars = tab_vars,
tab_labels = GetVarLabel(x, tab_vars),
tab_val_labels = GetValLabels(x, tab_vars),
function_name = "CreateExtractFreq",
info = info,
dataset = as.character(substitute(x)),
dataset_label = GetDatLabel(x),
notes = notes)
# tab_vars is a variable where each variable in vars is stratified
# statistical tests are run for each var, stratified by each tab_var
# if (!purrr::is_empty(tab_vars) & (sum(!is.na(tab_vars)) > 0)) {
#   extract_lst$tab_vals <- unique(dplyr::pull(x, tab_vars))
#   extract_lst$tab_vals <- extract_lst$tab_vals[order(extract_lst$tab_vals)]
#   #tab_vals <- tab_vals[order(tab_vals)]
# } else {
#   extract_lst$tab_vals <- NA
# }
# tab.max is important as the extract includes columns for stratification
# and the maximum number of unique values needs to be known
browser()
extract_lst$tab.max = ifelse(sum(!is.na(tab_vars)) > 0,
0, get_max_unique(x, tab_vars))
extract_lst$run_test = ifelse(extract_lst$tab.max == 0, FALSE, run_test)
# Write extract lines --------------------------------------------------------
# Write header line of the extract
write_header_line(extract_lst, fileConn)
# Loop over variables included in vars
for (var in vars) {
# List includes information specific to the current variable from vars
var_lst <- list(var_freq = create_data_tab(x, var, tab_var,
extract_lst$tab.max,
length_nona),
nobs = length(x[[var]]),
var_name = var,
var_label = GetVarLabel(x, var))
for (tab_var in tab_vars) {
var_lst$tab_var = tab_var
var_lst$tab_label = GetVarLabel(x, tab_var)
var_lst$tab_val_label = GetValLabels(x, tab_var)
if (run_test) {
result <- chisq.test(table(dplyr::pull(x, var), dplyr::pull(x, tab_var)))
result$statsig <- getsig(result$p.value)
} else {
result <- NA
}
# Loop over unique values in the current variable from vars
for (val in sort(unique(x[[var]]))) {
val_lst <- var_lst
val_lst$val <- val
val_lst$val_label <- GetValLabel(x, var, val)
val_lst$val_freq <- create_data_tab(x[x[[var]] == val, ],
var, tab_var, extract_lst$tab.max,
length_nona)
val_lst$result <- result
write_line(extract_lst, val_lst, fileConn)
}
}
}
# Finish extract -------------------------------------------------------------
if (!is.na(outputfile)) {
close(fileConn)
}
}
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
rm(CreateExtractFreq())
rm(CreateExtractFreq)
library(TableRExtracts)
CreateExtractFreq(flights, vars, "time_of_day", NA, "flights_extract", info)
ifelse(sum(!is.na(tab_vars)) > 0,
0, get_max_unique(x, tab_vars))
tab_vars
CreateExtractFreq(flights, vars, tab_vars, NA, "flights_extract", info)
ifelse(sum(!is.na(tab_vars)) > 0,
0, get_max_unique(x, tab_vars))
!is.na(tab_vars)
sum(!is.na(tab_vars))
sum(!is.na(tab_vars)) > 0
library(TableRExtracts)
CreateExtractFreq(flights, vars, tab_vars, NA, "flights_extract", info)
library(TableRExtracts)
CreateExtractFreq(flights, vars, tab_vars, NA, "flights_extract", info)
tab_vars
library(TableRExtracts)
unique(flights$year)
vars <- c("origin", "year")
CreateExtractFreq(flights, vars, tab_vars, NA, "flights_extract", info)
library(TableRExtracts)
result <- NA
is.null(result)
rep("", 4)
library(TableRExtracts)
library(TableRExtracts)
CreateExtractFreq(flights, vars, tab_vars, NA, "flights_extract", info)
library(TableRExtracts)
CreateExtractFreq(flights, vars, tab_vars, NA, "flights_extract", info)
runif(10, 0, 3)
round(runif(10, 0, 3))
hist(round(runif(10, 0, 3)))
hist(round(runif(10, 0, 3)), breaks = 4)
hist(round(runif(10, 0, 3)), breaks = 5)
hist(round(runif(100, 0, 3)), breaks = 5)
hist(round(runif(1000, 0, 3)), breaks = 5)
hist(round(runif(1000, 0, 3)), breaks = c(0.5, 1.5, 2.5))
hist(round(runif(1000, 0, 3)), breaks = c(0.5, 1.5, 2.5, 3.5))
hist(round(runif(1000, 0, 3)), breaks = c(-0.5, 0.5, 1.5, 2.5, 3.5))
hist(floor(runif(1000, 0, 3)), breaks = c(-0.5, 0.5, 1.5, 2.5, 3.5))
hist(floor(runif(10000, 0, 3)), breaks = c(-0.5, 0.5, 1.5, 2.5, 3.5))
flights$random_cat <- floor(runif(nrow(flights), 0, 4))
vars <- c("origin", "year")
tab_vars <- c("time_of_day", "random_cat")
flights$time_of_day <- ifelse(flights$hour <= 12, "Morning",
ifelse(flights$hour <= 17, "Afternoon",
"Evening"))
AddVarLabels(flights) <- c("origin" = "Origin airport of flight",
"hour" = "Time of flight (hour part)",
"time_of_day" = "Time of day for flight",
"random_cat" = "Random category, illustrative only")
AddValLabels(flights) <-
list("origin" = list(vals = c("EWR", "LGA", "JFK"),
labs = c("Newark, NJ", "La Guardia, NY", "JFK, NY")),
"time_of_day" = list(vals = c("Morning", "Afternoon", "Evening"),
labs = c("Morning", "Afternoon", "Evening")),
"random_cat" = list(vals = seq.int(0, 3, 1),
labs = c("Zero", "One", "Two", "Three")))
info <- c("FileName" = "TableRExtracts_test.R",
"DirName" = "TableRExtracts Work",
"Programmer" = "Ingels")
hist(flights$random_cat, breaks = seq(-0.5, 3.5, 0.5))
?create_data_tab
create_data_tab(flights, "dep_delay", "origin", 3, length_nona)
TableRExtracts::create_data_tab(flights, "dep_delay", "origin", 3, length_nona)
create_data_tab <- function(df, index, margin, tab.max, fnc, ...) {
# df must be a tibble
if (!tibble::is.tibble(df)) {
if (is.data.frame(df)) {
df <- tibble::as.tibble(df)
} else {
stop("In create_data_tab, argument df must be a data frame or tibble")
}
}
if (!is.function(fnc)) {
stop("In create_data_tab, argument fnc must be a function")
}
index_vec <- dplyr::pull(df, index)
if (is.na(margin)) {
data.tab <- fnc(index_vec, ...)
names(data.tab) <- "Overall"
return(data.tab)
} else {
margin_vec <- dplyr::pull(df, margin)
data.tab <- tapply(index_vec, margin_vec, fnc, ...)
data.tab <- c(data.tab, rep(NA, tab.max - length(data.tab)))
data.tab <- c(data.tab, fnc(index_vec, ...))
names(data.tab)[length(data.tab)] <- "Overall"
return(data.tab)
}
}
create_data_tab(flights, "dep_delay", "origin", 3, length_nona)
rm(create_data_tab())
rm(create_data_tab)
oneway.test(dep_delay ~ origin, data = flights)
tmp <- oneway.test(dep_delay ~ origin, data = flights)
summary(tmp)
var <- "dep_delay"
tab_var <- "origin"
as.formula(paste(var, tab_var, sep = " ~ "))
devtools::document()
library(TableRExtracts)
vars <- c("dep_delay", "arr_delay")
tab_vars <- c(tab_vars, "origin")
CreateExtractMean(flights, vars, tab_vars, NA, "flights_extract_mean", info)
library(TableRExtracts)
CreateExtractMean(flights, vars, tab_vars, NA, "flights_extract_mean", info)
library(TableRExtracts)
CreateExtractMean(flights, vars, tab_vars, NA, "flights_extract_mean", info)
library(TableRExtracts)
CreateExtractMean(flights, vars, tab_vars, NA, "flights_extract_mean", info)
devtools::document()
library(TableRExtracts)
CreateCodebook(flights, "flights")
devtools::uninstall("dataMaid")
devtools::uninstall(dataMaid)
devtools::uninstall(pkg = "dataMaid")
devtools::uninstall(pkg = dataMaid)
devtools::uninstall(pkg = package:dataMaid)
?devtools::use_package
devtools::document()
library("dataMaid", lib.loc="~/Library/Mobile Documents/com~apple~CloudDocs/TableRExtracts/packrat/lib/x86_64-apple-darwin13.4.0/3.3.3")
detach("package:dataMaid", unload=TRUE)
remove.packages("dataMaid", lib="~/Library/Mobile Documents/com~apple~CloudDocs/TableRExtracts/packrat/lib/x86_64-apple-darwin13.4.0/3.3.3")
install.packages("~/Documents/GitHub/dataMaid_1.1.2.tar.gz", repos = NULL, type = "source")
?devtools::use_package
library(TableRExtracts)
CreateCodebook(flights, "flights")
devtools::use_package(dataMaid)
devtools::use_package("dataMaid")
library(TableRExtracts)
CreateCodebook(flights, "flights")
names(flights)
CombineLabels <- function(df) {
# first for the dataset
if (!is.null(GetDatDescrip(df))) {
AddDatLabel <- paste(GetDatLabel(df), GetDatDescrip(df), sep = "\n")
}
for (i in names(df)) {
if (!is.null(GetVarDescrip(df, i))) {
AddVarLabel <- paste(GetVarLabel(df, i), GetVarDescrip(df, i), sep = "\n")
}
}
return(df)
}
tmp <- CombineLabels(flights)
CombineLabels <- function(df) {
browser()
# first for the dataset
if (!is.null(GetDatDescrip(df))) {
AddDatLabel <- paste(GetDatLabel(df), GetDatDescrip(df), sep = "\n")
}
for (i in names(df)) {
if (!is.null(GetVarDescrip(df, i))) {
AddVarLabel <- paste(GetVarLabel(df, i), GetVarDescrip(df, i), sep = "\n")
}
}
return(df)
}
tmp <- CombineLabels(flights)
paste(GetDatLabel(df), GetDatDescrip(df), sep = "\n")
CombineLabels <- function(df) {
browser()
# first for the dataset
if (!is.null(GetDatDescrip(df))) {
AddDatLabel(df) <- paste(GetDatLabel(df), GetDatDescrip(df), sep = "\n")
}
for (i in names(df)) {
if (!is.null(GetVarDescrip(df, i))) {
AddVarLabel(df, i) <-
paste(GetVarLabel(df, i), GetVarDescrip(df, i), sep = "\n")
}
}
return(df)
}
CombineLabels <- function(df) {
# first for the dataset
if (!is.null(GetDatDescrip(df))) {
AddDatLabel(df) <- paste(GetDatLabel(df), GetDatDescrip(df), sep = "\n")
}
for (i in names(df)) {
if (!is.null(GetVarDescrip(df, i))) {
AddVarLabel(df, i) <-
paste(GetVarLabel(df, i), GetVarDescrip(df, i), sep = "\n")
}
}
return(df)
}
tmp <- CombineLabels(flights)
GetDatLabel(tmp)
cat(GetDatLabel(tmp))
library(TableRExtracts)
remove.packages("dataMaid", lib="~/Library/Mobile Documents/com~apple~CloudDocs/TableRExtracts/packrat/lib/x86_64-apple-darwin13.4.0/3.3.3")
install.packages("~/Documents/GitHub/dataMaid_1.1.2.tar.gz", repos = NULL, type = "source")
library(TableRExtracts)
?devtools::build
devtools::document()
devtools::build()
library(TableRExtracts)
devtools::check()
devtools::use_package("stringr")
devtools::use_mit_license()
?devtools::use_dev_version
devtools::use_dev_version()
